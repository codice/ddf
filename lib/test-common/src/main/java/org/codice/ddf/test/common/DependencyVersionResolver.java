/**
 * Copyright (c) Codice Foundation
 *
 * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation, either version 3 of
 * the License, or any later version.
 *
 * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public
 * License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 */
package org.codice.ddf.test.common;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import org.codice.ddf.test.common.options.TestResourcesOptions;
import org.ops4j.pax.exam.MavenUtils;
import org.ops4j.pax.exam.options.MavenUrlReference;

/**
 * Returns dependency versions using a local dependencies.properties file instead of relying on a
 * classloader. Falls back on the classloader if not local dependencies.properties file is found.
 * Make sure the depends-maven-plugin plugin is running before the test phase and the
 * dependencies.properties file is included as a test resource.
 */
public class DependencyVersionResolver implements MavenUrlReference.VersionResolver {

  private DependencyVersionResolver() {}

  @Override
  public String getVersion(String groupId, String artifactId) {
    File dependencyFile =
        new File(TestResourcesOptions.getTestResource("/META-INF/maven/dependencies.properties"));
    if (!dependencyFile.exists()) {
      return MavenUtils.getArtifactVersion(groupId, artifactId);
    }

    final Properties dependencies = new Properties();
    InputStream depInputStream = null;
    try {

      depInputStream = dependencyFile.toURI().toURL().openStream();
      dependencies.load(depInputStream);
      final String version = dependencies.getProperty(groupId + "/" + artifactId + "/version");
      if (version == null) {
        throw new IllegalArgumentException(
            "Could not resolve version. Do you have a dependency for "
                + groupId
                + "/"
                + artifactId
                + " in your maven project?");
      }
      return version;
    } catch (IOException e) {
      throw new IllegalArgumentException(
          "Could not resolve version for groupId:"
              + groupId
              + " artifactId:"
              + artifactId
              + " by reading the dependency information generated by maven.",
          e);
    } finally {
      if (depInputStream != null) {
        try {
          depInputStream.close();
        } catch (IOException e) {
          // ignore exceptions on close.
        }
      }
    }
  }

  public static MavenUrlReference.VersionResolver resolver() {

    return new DependencyVersionResolver();
  }
}
