/**
 * Copyright (c) Codice Foundation
 * <p>
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 * <p>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 **/
package org.codice.ui.admin.wizard.config;

/**
 * Defines the contract for transactional persistence handlers.
 *
 * @param <T> the expected return value from calls to the {@link #commit} and {@link #rollback()}
 *            methods. In most cases, there is no return value needed and the implementing class should
 *            {@code implements ConfigHandler<Void>}; however, in the case where some sort of lookup
 *            key might be generated by the process of committing a change, the implementing class
 *            should be of that type and then return that value on commit/rollback.
 */
public interface ConfigHandler<T> {
    /**
     * Invoked by the {@link Configurator} as part of its transaction orchestration.
     * This method persists the changes that were queued up to the underlying data.
     *
     * @return any lookup key that might be associated with the persisted configuration
     * @throws ConfiguratorException if any errors occur with the save
     */
    T commit() throws ConfiguratorException;

    /**
     * Invoked by the {@link Configurator} as part of its transaction orchestration.
     * This method reverts the changes made in the {@link #commit()} call, returning the underlying
     * data to its initial state.
     *
     * @return any lookup key that might be associated with the rolled-back configuration
     * @throws ConfiguratorException if any errors occur with the rollback
     */
    T rollback() throws ConfiguratorException;
}
