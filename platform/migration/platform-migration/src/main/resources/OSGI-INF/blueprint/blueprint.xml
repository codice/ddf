<?xml version="1.0" encoding="UTF-8"?>
<!-- /**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/ -->

<blueprint xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.2.0"
           xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

    <ext:property-placeholder>
        <ext:default-properties>
            <ext:property name="configFileExtension" value=".config"/>
            <ext:property name="configFileDirectory" value="${ddf.home}/etc"/>
            <ext:property name="processedDirectory" value="${ddf.home}/etc/processed"/>
            <ext:property name="failedDirectory" value="${ddf.home}/etc/failed"/>
        </ext:default-properties>
    </ext:property-placeholder>

    <reference id="configurationAdmin" interface="org.osgi.service.cm.ConfigurationAdmin"/>

    <bean id="watchThread" class="java.util.concurrent.Executors"
          factory-method="newSingleThreadExecutor"/>

    <bean id="defaultFileSystem" class="java.nio.file.FileSystems" factory-method="getDefault"/>

    <bean id="watchService" factory-ref="defaultFileSystem" factory-method="newWatchService"/>

    <bean id="persistenceStrategy"
          class="org.codice.ddf.configuration.persistence.felix.FelixPersistenceStrategy"/>

    <!-- Base URI for DDF home -->
    <bean id="ddfHomeFile" class="java.io.File">
        <argument value="${ddf.home}"/>
    </bean>

    <bean id="ddfHomeUri" class="java.net.URI" factory-ref="ddfHomeFile" factory-method="toURI"/>

    <bean id="ddfHome" class="java.nio.file.Paths" factory-method="get">
        <argument ref="ddfHomeUri"/>
    </bean>

    <!-- Config Directory Path ${ddf.home}/etc/ -->
    <bean id="configDirectoryPath" class="java.nio.file.Path" factory-ref="ddfHome"
          factory-method="resolve">
        <argument value="etc"/>
    </bean>

    <!-- Processed Directory Path ${ddf.home}/etc/processed -->
    <bean id="processedDirectoryPath" class="java.nio.file.Path" factory-ref="ddfHome"
          factory-method="resolve">
        <argument value="${ddf.home}/etc/processed"/>
    </bean>

    <!-- Failed Directory Path ${ddf.home}/etc/failed -->
    <bean id="failedDirectoryPath" class="java.nio.file.Path" factory-ref="ddfHome"
          factory-method="resolve">
        <argument value="${ddf.home}/etc/failed"/>
    </bean>

    <bean id="configurationFileFactory"
          class="org.codice.ddf.configuration.admin.ConfigurationFileFactory">
        <argument ref="persistenceStrategy"/>
        <argument ref="configurationAdmin"/>
    </bean>

    <bean id="configurationFilesPoller"
          class="org.codice.ddf.configuration.admin.ConfigurationFilesPoller"
          init-method="init" destroy-method="destroy">
        <argument ref="configDirectoryPath"/>
        <argument value="${configFileExtension}"/>
        <argument ref="watchService"/>
        <argument ref="watchThread"/>
    </bean>

    <bean id="configDirectoryStream" class="java.nio.file.Files"
          factory-method="newDirectoryStream">
        <argument ref="configDirectoryPath"/>
        <argument value="*${configFileExtension}"/>
    </bean>

    <bean id="configurationAdminMigration"
          class="org.codice.ddf.configuration.admin.ConfigurationAdminMigration"
          init-method="init">
        <argument ref="configDirectoryStream"/>
        <argument ref="processedDirectoryPath"/>
        <argument ref="failedDirectoryPath"/>
        <argument ref="configurationFileFactory"/>
        <argument ref="configurationFilesPoller"/>
        <argument ref="configurationAdmin"/>
        <argument value="${configFileExtension}"/>
    </bean>

    <bean id="mBeanServer"
          class="java.lang.management.ManagementFactory"
          factory-method="getPlatformMBeanServer"/>

    <!-- DataMigratable service reference list -->
    <bean id="sortedDataMigratables" class="org.codice.ddf.platform.util.SortedServiceList"/>

    <reference-list id="dataMigratables" interface="org.codice.ddf.migration.DataMigratable"
                    availability="optional">
        <reference-listener bind-method="bindPlugin" unbind-method="unbindPlugin"
                            ref="sortedDataMigratables"/>
    </reference-list>

    <!-- ConfigurationMigratable service reference list -->
    <bean id="sortedConfigurationMigratables"
          class="org.codice.ddf.platform.util.SortedServiceList"/>

    <reference-list id="configurationMigratables"
                    interface="org.codice.ddf.migration.ConfigurationMigratable"
                    availability="optional">
        <reference-listener bind-method="bindPlugin" unbind-method="unbindPlugin"
                            ref="sortedConfigurationMigratables"/>
    </reference-list>

    <!-- ConfigurationMigrationManager -->
    <bean id="configMigrationManager"
          class="org.codice.ddf.configuration.migration.ConfigurationMigrationManager"
          init-method="init">
        <argument ref="configurationAdminMigration"/>
        <argument ref="mBeanServer"/>
        <argument ref="sortedConfigurationMigratables"/>
        <argument ref="sortedDataMigratables"/>
    </bean>

    <service id="configurationFileDirectoryService" ref="configurationAdminMigration"
             auto-export="interfaces"/>

    <service id="configurationMigrationManager" ref="configMigrationManager"
             auto-export="interfaces"/>

</blueprint>