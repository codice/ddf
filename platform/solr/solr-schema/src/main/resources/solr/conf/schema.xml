<?xml version="1.0" encoding="UTF-8" ?>
<!--
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
-->
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--  
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default) 
 or located where the classloader for the Solr webapp can find it.

 This example schema is the recommended starting point for users.
 It should be kept correct and concise, usable out-of-the-box.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml

 PERFORMANCE NOTE: this schema includes many optional features and should not
 be used for benchmarking.  To improve performance one could
  - set stored="false" for all fields possible (esp large fields) when you
    only need to search on the field but don't need to return the original
    value.
  - set indexed="false" if you don't need to search on the field, but only
    return the field as a result of searching on other indexed fields.
  - remove all unneeded copyField statements
  - for best index size and searching performance, set "index" to false
    for all general text fields, use copyField to copy them to the
    catchall "text" field, and use that for searching.
  - For maximum indexing performance, use the ConcurrentUpdateSolrServer
    java client.
  - Remember to run the JVM in server mode, and use a higher logging level
    that avoids logging every request
-->

<schema name="dynamic" version="1.6">
    <!-- attribute "name" is the name of this schema and is only used for display purposes.
         version="x.y" is Solr's version number for the schema syntax and
         semantics.  It should not normally be changed by applications.

         1.0: multiValued attribute did not exist, all fields are multiValued
              by nature
         1.1: multiValued attribute introduced, false by default
         1.2: omitTermFreqAndPositions attribute introduced, true by default
              except for text fields.
         1.3: removed optional field compress feature
         1.4: autoGeneratePhraseQueries attribute introduced to drive QueryParser
              behavior when a single string produces multiple tokens.  Defaults
              to off for version >= 1.4
         1.5: omitNorms defaults to true for primitive field types
              (int, float, boolean, string...)
       -->


    <!-- Valid attributes for fields:
      name: mandatory - the name for the field
      type: mandatory - the name of a field type from the
        <types> fieldType section
      indexed: true if this field should be indexed (searchable or sortable)
      stored: true if this field should be retrievable
      docValues: true if this field should have doc values. Doc values are
        useful for faceting, grouping, sorting and function queries. Although not
        required, doc values will make the index faster to load, more
        NRT-friendly and more memory-efficient. They however come with some
        limitations: they are currently only supported by StrField, UUIDField
        and all Trie*Fields, and depending on the field type, they might
        require the field to be single-valued, be required or have a default
        value (check the documentation of the field type you're interested in
        for more information)
      multiValued: true if this field may contain multiple values per document
      omitNorms: (expert) set to true to omit the norms associated with
        this field (this disables length normalization and index-time
        boosting for the field, and saves some memory).  Only full-text
        fields or fields that need an index-time boost need norms.
        Norms are omitted for primitive (non-analyzed) types by default.
      termVectors: [false] set to true to store the term vector for a
        given field.
        When using MoreLikeThis, fields used for similarity should be
        stored for best performance.
      termPositions: Store position information with the term vector.
        This will increase storage costs.
      termOffsets: Store offset information with the term vector. This
        will increase storage costs.
      required: The field is required.  It will throw an error if the
        value does not exist
      default: a value that should be used if no value is specified
        when adding a document.
    -->

    <!-- field names should consist of alphanumeric or underscore characters only and
       not start with a digit.  This is not currently strictly enforced,
       but other field names will not have first class support from all components
       and back compatibility is not guaranteed.  Names with both leading and
       trailing underscores (e.g. _version_) are reserved.
    -->

    <!-- If you remove this field, you must _also_ disable the update log in solrconfig.xml
       or Solr won't start. _version_ and update log are required for SolrCloud
    -->
    <field name="_version_" type="long" indexed="true" stored="true"/>

    <!-- points to the root document of a block of nested documents. Required for nested
       document support, may be removed otherwise
    -->
    <!--<field name="_root_"  type="string" indexed="true" stored="true" docValues="true"/>-->

    <field name="id_txt" type="string" indexed="true" stored="true" required="true" docValues="true"/>
    <field name="id_txt_tokenized" type="text_general" indexed="true" stored="false"
           required="false"/>
    <field name="id_txt_tokenized_has_case" type="text_general_has_case" indexed="true"
           stored="false" required="false"/>

    <!-- Field to use to determine and enforce document uniqueness.
     Unless this field is marked with required="false", it will be a required field
  -->
    <uniqueKey>id_txt</uniqueKey>

    <field name="lux_xml" type="binary" indexed="false" stored="true"/>

    <!-- Dynamic field definitions allow using convention over configuration
        for fields via the specification of patterns to match field names.
        EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
        RESTRICTION: the glob-like pattern in the name attribute must have
        a "*" only at the start or the end.  -->

    <!--<dynamicField name="*_i"  type="int"    indexed="true"  stored="true"/>-->
    <!--<dynamicField name="*_is" type="int"    indexed="true"  stored="true"  multiValued="true"/>-->
    <!--<dynamicField name="*_s"  type="string"  indexed="true"  stored="true" />-->
    <!--<dynamicField name="*_ss" type="string"  indexed="true"  stored="true" multiValued="true"/>-->
    <!--<dynamicField name="*_l"  type="long"   indexed="true"  stored="true"/>-->
    <!--<dynamicField name="*_ls" type="long"   indexed="true"  stored="true"  multiValued="true"/>-->
    <!--<dynamicField name="*_t"  type="text_general"    indexed="true"  stored="true"/>-->
    <!--<dynamicField name="*_b"  type="boolean" indexed="true" stored="true"/>-->
    <!--<dynamicField name="*_bs" type="boolean" indexed="true" stored="true"  multiValued="true"/>-->
    <!--<dynamicField name="*_f"  type="float"  indexed="true"  stored="true"/>-->
    <!--<dynamicField name="*_fs" type="float"  indexed="true"  stored="true"  multiValued="true"/>-->
    <!--<dynamicField name="*_d"  type="double" indexed="true"  stored="true"/>-->
    <!--<dynamicField name="*_ds" type="double" indexed="true"  stored="true"  multiValued="true"/>-->

    <!--<dynamicField name="*_dt"  type="date"    indexed="true"  stored="true"/>-->
    <!--<dynamicField name="*_dts" type="date"    indexed="true"  stored="true" multiValued="true"/>-->
    <!--<dynamicField name="*_p"  type="location" indexed="true" stored="true"/>-->

    <!--&lt;!&ndash; some trie-coded dynamic fields for faster range queries &ndash;&gt;-->
    <!--<dynamicField name="*_ti" type="tint"    indexed="true"  stored="true"/>-->
    <!--<dynamicField name="*_tl" type="tlong"   indexed="true"  stored="true"/>-->
    <!--<dynamicField name="*_tf" type="tfloat"  indexed="true"  stored="true"/>-->
    <!--<dynamicField name="*_td" type="tdouble" indexed="true"  stored="true"/>-->

    <!--<dynamicField name="ignored_*" type="ignored" multiValued="true"/>-->
    <!--<dynamicField name="attr_*" type="text_general" indexed="true" stored="true" multiValued="true"/>-->

    <!--<dynamicField name="random_*" type="random" />-->


    <dynamicField name="*_int" type="pints" indexed="true" stored="true" multiValued="true" docValues="true"/>
    <dynamicField name="*_lng" type="plongs" indexed="true" stored="true" multiValued="true" docValues="true"/>
    <dynamicField name="*_shr" type="pints" indexed="true" stored="true" multiValued="true" docValues="true"/>
    <dynamicField name="*_flt" type="pfloats" indexed="true" stored="true" multiValued="true" docValues="true"/>
    <dynamicField name="*_dbl" type="pdoubles" indexed="true" stored="true" multiValued="true" docValues="true"/>
    <dynamicField name="*_tdt" type="pdates" indexed="true" stored="true" multiValued="true" docValues="true"/>
    <dynamicField name="*_bln" type="boolean" indexed="true" stored="true" multiValued="true" docValues="true"/>

    <dynamicField name="*_geo" type="string" indexed="false" stored="true" multiValued="true"/>
    <dynamicField name="*_geo_index" type="srptgeom" indexed="true" stored="false"
                  multiValued="true"/>
    <dynamicField name="*_geo_sort" type="location" indexed="true" stored="false"
                  multiValued="true"/>

    <dynamicField name="*_xml" type="string" indexed="false" stored="true" multiValued="true"/>
    <dynamicField name="*_txt" type="string" indexed="true" stored="true" multiValued="true" docValues="true"/>
    <dynamicField name="*_txt_ws" type="text_ws" indexed="true" stored="false"
                  multiValued="true"/>
    <dynamicField name="*_txt_tokenized" type="text_general" indexed="true" stored="false"
                  multiValued="true"/>
    <dynamicField name="*_txt_ws_has_case" type="text_ws_has_case" indexed="true" stored="false"
                  multiValued="true"/>
    <dynamicField name="*_txt_tokenized_has_case" type="text_general_has_case" indexed="true"
                  stored="false" multiValued="true"/>

    <dynamicField name="*_bin" type="binary" indexed="false" stored="true" multiValued="true"/>
    <dynamicField name="*_obj" type="binary" indexed="false" stored="true" multiValued="true"/>

    <!-- DEPRECATED: The defaultSearchField is consulted by various query parsers when
     parsing a query string that isn't explicit about the field.  Machine (non-user)
     generated queries are best made explicit, or they can use the "df" request parameter
     which takes precedence over this.
     Note: Un-commenting defaultSearchField will be insufficient if your request handler
     in solrconfig.xml defines "df", which takes precedence. That would need to be removed.
    <defaultSearchField>text</defaultSearchField> -->

    <!-- DEPRECATED: The defaultOperator (AND|OR) is consulted by various query parsers
     when parsing a query string to determine if a clause of the query should be marked as
     required or optional, assuming the clause isn't already marked by some operator.
     The default is OR, which is generally assumed so it is not a good idea to change it
     globally here.  The "q.op" request parameter takes precedence over this.
    <solrQueryParser defaultOperator="OR"/> -->

    <!-- copyField commands copy one field to another at the time a document
          is added to the index.  It's used either to index the same field differently,
          or to add multiple fields to the same field for easier/faster searching.  -->
    <copyField source="*_txt_tokenized" dest="*_txt_tokenized_has_case"/>
    <copyField source="*_txt_tokenized" dest="*_txt_ws"/>
    <copyField source="*_txt_tokenized" dest="*_txt_ws_has_case"/>

    <!-- Necessary for Spatial4j to work -->
    <copyField source="*_geo" dest="*_geo_index"/>


    <!-- Above, multiple source fields are copied to the [text] field.
     Another way to map multiple source fields to the same
     destination field is to use the dynamic field syntax.
     copyField also supports a maxChars to copy setting.  -->

    <!-- <copyField source="*_t" dest="text" maxChars="3000"/> -->

    <!-- copy name to alphaNameSort, a field designed for sorting by name -->
    <!-- <copyField source="name" dest="alphaNameSort"/> -->


    <!-- field type definitions. The "name" attribute is
       just a label to be used by field definitions.  The "class"
       attribute and any other attributes determine the real
       behavior of the fieldType.
         Class names starting with "solr" refer to java classes in a
       standard package such as org.apache.solr.analysis
    -->

    <!-- The StrField type is not analyzed, but indexed/stored verbatim.
       It supports doc values but in that case the field needs to be
       single-valued and either required or have a default value.
      -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" />

    <!-- boolean type: "true" or "false" -->
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>

    <!-- sortMissingLast and sortMissingFirst attributes are optional attributes are
         currently supported on types that are sorted internally as strings
         and on numeric types.
       This includes "string","boolean", and, as of 3.5 (and 4.x),
       int, float, long, date, double, including the "Trie" variants.
       - If sortMissingLast="true", then a sort on this field will cause documents
         without the field to come after documents with the field,
         regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true", then a sort on this field will cause documents
         without the field to come before documents with the field,
         regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
         then default lucene sorting will be used which places docs without the
         field first in an ascending sort and last in a descending sort.
    -->

    <!--
      Numeric field types that index values using KD-trees. *Point fields are faster and more efficient than Trie* fields both, at
      search time and at index time, but some features are still not supported.
      Point fields don't support FieldCache, so they must have docValues="true" if needed for sorting, faceting, functions, etc.
    -->
    <fieldType name="pint" class="solr.IntPointField" docValues="true"/>
    <fieldType name="pfloat" class="solr.FloatPointField" docValues="true"/>
    <fieldType name="plong" class="solr.LongPointField" docValues="true"/>
    <fieldType name="pdouble" class="solr.DoublePointField" docValues="true"/>

    <fieldType name="pints" class="solr.IntPointField" docValues="true" multiValued="true"/>
    <fieldType name="pfloats" class="solr.FloatPointField" docValues="true" multiValued="true"/>
    <fieldType name="plongs" class="solr.LongPointField" docValues="true" multiValued="true"/>
    <fieldType name="pdoubles" class="solr.DoublePointField" docValues="true" multiValued="true"/>

    <!--
      Default numeric field types. For faster range queries, consider *PointFields (pint/pfloat/plong/pdouble), or the
      tint/tfloat/tlong/tdouble types.
    -->
    <fieldType name="int" class="solr.TrieIntField" docValues="true" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="float" class="solr.TrieFloatField" docValues="true" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="long" class="solr.TrieLongField" docValues="true" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="double" class="solr.TrieDoubleField" docValues="true" precisionStep="0" positionIncrementGap="0"/>

    <fieldType name="ints" class="solr.TrieIntField" docValues="true" precisionStep="0" positionIncrementGap="0" multiValued="true"/>
    <fieldType name="floats" class="solr.TrieFloatField" docValues="true" precisionStep="0" positionIncrementGap="0" multiValued="true"/>
    <fieldType name="longs" class="solr.TrieLongField" docValues="true" precisionStep="0" positionIncrementGap="0" multiValued="true"/>
    <fieldType name="doubles" class="solr.TrieDoubleField" docValues="true" precisionStep="0" positionIncrementGap="0" multiValued="true"/>

    <!--
     Numeric field types that index each value at various levels of precision
     to accelerate range queries when the number of values between the range
     endpoints is large. See the javadoc for NumericRangeQuery for internal
     implementation details.

     Smaller precisionStep values (specified in bits) will lead to more tokens
     indexed per value, slightly larger index size, and faster range queries.
     A precisionStep of 0 disables indexing at different precision levels.

     Consider using pint/pfloat/plong/pdouble instead of Trie* fields if possible
    -->
    <fieldType name="tint" class="solr.TrieIntField" docValues="true" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tfloat" class="solr.TrieFloatField" docValues="true" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tlong" class="solr.TrieLongField" docValues="true" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tdouble" class="solr.TrieDoubleField" docValues="true" precisionStep="8" positionIncrementGap="0"/>

    <fieldType name="tints" class="solr.TrieIntField" docValues="true" precisionStep="8" positionIncrementGap="0" multiValued="true"/>
    <fieldType name="tfloats" class="solr.TrieFloatField" docValues="true" precisionStep="8" positionIncrementGap="0" multiValued="true"/>
    <fieldType name="tlongs" class="solr.TrieLongField" docValues="true" precisionStep="8" positionIncrementGap="0" multiValued="true"/>
    <fieldType name="tdoubles" class="solr.TrieDoubleField" docValues="true" precisionStep="8" positionIncrementGap="0" multiValued="true"/>


    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime    
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day
                      
         Consult the TrieDateField javadocs for more information.
      -->
    <!-- KD-tree versions of date fields -->
    <fieldType name="pdate" class="solr.DatePointField" docValues="true"/>
    <fieldType name="pdates" class="solr.DatePointField" docValues="true" multiValued="true"/>

    <fieldType name="date" class="solr.TrieDateField" docValues="true" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="dates" class="solr.TrieDateField" docValues="true" precisionStep="0" positionIncrementGap="0" multiValued="true"/>

    <fieldType name="tdate" class="solr.TrieDateField" docValues="true" precisionStep="6" positionIncrementGap="0"/>
    <fieldType name="tdates" class="solr.TrieDateField" docValues="true" precisionStep="6" positionIncrementGap="0" multiValued="true"/>



    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
    <fieldType name="binary" class="solr.BinaryField"/>

    <!-- The "RandomSortField" is not used to store or search any
         data.  You can declare fields of this type it in your schema
         to generate pseudo-random orderings of your docs for sorting 
         or function purposes.  The ordering is generated based on the field
         name and the version of the index. As long as the index version
         remains unchanged, and the same field name is reused,
         the ordering of the docs will be consistent.  
         If you want different psuedo-random orderings of documents,
         for the same version of the index, use a dynamicField and
         change the field name in the request.
     -->
    <fieldType name="random" class="solr.RandomSortField" indexed="true" />

    <!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see
         http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
     -->

    <!-- One can also specify an existing Analyzer class that has a
         default constructor via the class attribute on the analyzer element.
         Example:
    <fieldType name="text_greek" class="solr.TextField">
      <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
    </fieldType>
    -->

    <!-- A text field that only splits on whitespace for exact matching of words -->
    <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.PatternReplaceFilterFactory"
                    pattern="^\p{Punct}*(.*?)\p{Punct}*$" replacement="$1"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        </analyzer>
    </fieldType>

    <fieldType name="text_ws_has_case" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.PatternReplaceFilterFactory"
                    pattern="^\p{Punct}*(.*?)\p{Punct}*$" replacement="$1"/>
            <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        </analyzer>
    </fieldType>

    <!-- A general text field that has reasonable, generic
         cross-language defaults: it tokenizes with StandardTokenizer,
   removes stop words from case-insensitive "stopwords.txt"
   (empty by default), and down cases.  At query time only, it
   also applies synonyms. -->
    <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            -->
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
            <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- A general text case-sensitive field that has reasonable, generic cross-language
    defaults: it tokenizes with StandardTokenizer and removes stop words from
    case-insensitive "stopwords.txt" (empty by default). At query time only,
    it also applies synonyms. -->
    <fieldType name="text_general_has_case" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
            <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        </analyzer>
    </fieldType>

    <!-- A text field with defaults appropriate for English: it
         tokenizes with StandardTokenizer, removes English stop words
         (lang/stopwords_en.txt), down cases, protects words from protwords.txt, and
         finally applies Porter's stemming.  The query time analyzer
         also applies synonyms from synonyms.txt. -->
    <!--<fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer type="index">-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--&lt;!&ndash; in this example, we will only use synonyms at query time-->
            <!--<filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>-->
            <!--&ndash;&gt;-->
            <!--&lt;!&ndash; Case insensitive stop word removal.-->
            <!--&ndash;&gt;-->
            <!--<filter class="solr.StopFilterFactory"-->
                    <!--ignoreCase="true"-->
                    <!--words="lang/stopwords_en.txt"-->
                    <!--/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.EnglishPossessiveFilterFactory"/>-->
            <!--<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>-->
            <!--&lt;!&ndash; Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:-->
                  <!--<filter class="solr.EnglishMinimalStemFilterFactory"/>-->
            <!--&ndash;&gt;-->
            <!--<filter class="solr.PorterStemFilterFactory"/>-->
        <!--</analyzer>-->
        <!--<analyzer type="query">-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>-->
            <!--<filter class="solr.StopFilterFactory"-->
                    <!--ignoreCase="true"-->
                    <!--words="lang/stopwords_en.txt"-->
                    <!--/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.EnglishPossessiveFilterFactory"/>-->
            <!--<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>-->
            <!--&lt;!&ndash; Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:-->
                  <!--<filter class="solr.EnglishMinimalStemFilterFactory"/>-->
            <!--&ndash;&gt;-->
            <!--<filter class="solr.PorterStemFilterFactory"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; A text field with defaults appropriate for English, plus-->
   <!--aggressive word-splitting and autophrase features enabled.-->
   <!--This field is just like text_en, except it adds-->
   <!--WordDelimiterFilter to enable splitting and matching of-->
   <!--words on case-change, alpha numeric boundaries, and-->
   <!--non-alphanumeric chars.  This means certain compound word-->
   <!--cases will work, for example query "wi fi" will match-->
   <!--document "WiFi" or "wi-fi".-->
        <!--&ndash;&gt;-->
    <!--<fieldType name="text_en_splitting" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">-->
        <!--<analyzer type="index">-->
            <!--<tokenizer class="solr.WhitespaceTokenizerFactory"/>-->
            <!--&lt;!&ndash; in this example, we will only use synonyms at query time-->
            <!--<filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>-->
            <!--&ndash;&gt;-->
            <!--&lt;!&ndash; Case insensitive stop word removal.-->
            <!--&ndash;&gt;-->
            <!--<filter class="solr.StopFilterFactory"-->
                    <!--ignoreCase="true"-->
                    <!--words="lang/stopwords_en.txt"-->
                    <!--/>-->
            <!--<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>-->
            <!--<filter class="solr.PorterStemFilterFactory"/>-->
        <!--</analyzer>-->
        <!--<analyzer type="query">-->
            <!--<tokenizer class="solr.WhitespaceTokenizerFactory"/>-->
            <!--<filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>-->
            <!--<filter class="solr.StopFilterFactory"-->
                    <!--ignoreCase="true"-->
                    <!--words="lang/stopwords_en.txt"-->
                    <!--/>-->
            <!--<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>-->
            <!--<filter class="solr.PorterStemFilterFactory"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Less flexible matching, but less false matches.  Probably not ideal for product names,-->
         <!--but may be good for SKUs.  Can insert dashes in the wrong place and still match. &ndash;&gt;-->
    <!--<fieldType name="text_en_splitting_tight" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.WhitespaceTokenizerFactory"/>-->
            <!--<filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>-->
            <!--<filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>-->
            <!--<filter class="solr.EnglishMinimalStemFilterFactory"/>-->
            <!--&lt;!&ndash; this filter can remove any duplicate tokens that appear at the same position - sometimes-->
                 <!--possible with WordDelimiterFilter in conjuncton with stemming. &ndash;&gt;-->
            <!--<filter class="solr.RemoveDuplicatesTokenFilterFactory"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!-- Just like text_general except it reverses the characters of
   each token, to enable more efficient leading wildcard queries. -->
    <fieldType name="text_general_rev" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
                    maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- charFilter + WhitespaceTokenizer  -->
    <!--
    <fieldType name="text_char_norm" class="solr.TextField" positionIncrementGap="100" >
      <analyzer>
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>
    -->

    <fieldType name="alphaNumericSort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
        <analyzer>
            <!-- The TrimFilter removes any leading or trailing whitespace -->
            <filter class="solr.TrimFilterFactory" />
            <!-- Truncate the field to 127 Characters, the maximum value allowed -->
            <filter class="solr.TruncateTokenFilterFactory" prefixLength="127" />
            <!-- KeywordTokenizer does no actual tokenizing, so the entire
                 input string is preserved as a single token
              -->
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <!-- The LowerCase TokenFilter does what you expect, which can be
                 when you want your sorting to be case insensitive
              -->
            <filter class="solr.LowerCaseFilterFactory" />
        </analyzer>
    </fieldType>

    <!-- This is an example of using the KeywordTokenizer along
         With various TokenFilterFactories to produce a sortable field
         that does not include some properties of the source text
      -->
    <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
        <analyzer>
            <!-- KeywordTokenizer does no actual tokenizing, so the entire
                 input string is preserved as a single token
              -->
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <!-- The LowerCase TokenFilter does what you expect, which can be
                 when you want your sorting to be case insensitive
              -->
            <filter class="solr.LowerCaseFilterFactory" />
            <!-- The TrimFilter removes any leading or trailing whitespace -->
            <filter class="solr.TrimFilterFactory" />
            <!-- The PatternReplaceFilter gives you the flexibility to use
                 Java Regular expression to replace any sequence of characters
                 matching a pattern with an arbitrary replacement string,
                 which may include back references to portions of the original
                 string matched by the pattern.

                 See the Java Regular Expression documentation for more
                 information on pattern and replacement string syntax.

                 http://docs.oracle.com/javase/7/docs/api/java/util/regex/package-summary.html
              -->
            <filter class="solr.PatternReplaceFilterFactory"
                    pattern="([^a-z])" replacement="" replace="all"
                    />
        </analyzer>
    </fieldType>

    <fieldType name="phonetic" stored="false" indexed="true" class="solr.TextField" >
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
        </analyzer>
    </fieldType>

    <fieldType name="payloads" stored="false" indexed="true" class="solr.TextField" >
        <analyzer>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!--
            The DelimitedPayloadTokenFilter can put payloads on tokens... for example,
            a token of "foo|1.4"  would be indexed as "foo" with a payload of 1.4f
            Attributes of the DelimitedPayloadTokenFilterFactory :
             "delimiter" - a one character delimiter. Default is | (pipe)
       "encoder" - how to encode the following value into a playload
          float -> org.apache.lucene.analysis.payloads.FloatEncoder,
          integer -> o.a.l.a.p.IntegerEncoder
          identity -> o.a.l.a.p.IdentityEncoder
                Fully Qualified class name implementing PayloadEncoder, Encoder must have a no arg constructor.
             -->
            <filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
        </analyzer>
    </fieldType>

    <!-- lowercases the entire field value, keeping it as a single token.  -->
    <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory" />
        </analyzer>
    </fieldType>

    <!-- 
      Example of using PathHierarchyTokenizerFactory at index time, so
      queries for paths match documents at that path, or in descendent paths
    -->
    <fieldType name="descendent_path" class="solr.TextField">
        <analyzer type="index">
            <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/" />
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.KeywordTokenizerFactory" />
        </analyzer>
    </fieldType>
    <!-- 
      Example of using PathHierarchyTokenizerFactory at query time, so
      queries for paths match documents at that path, or in ancestor paths
    -->
    <fieldType name="ancestor_path" class="solr.TextField">
        <analyzer type="index">
            <tokenizer class="solr.KeywordTokenizerFactory" />
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/" />
        </analyzer>
    </fieldType>

    <!-- since fields of this type are by default not stored or indexed,
         any data added to them will be ignored outright.  -->
    <fieldType name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />

    <!-- This point type indexes the coordinates as separate fields (subFields)
      If subFieldType is defined, it references a type, and a dynamic field
      definition is created matching *___<typename>.  Alternately, if 
      subFieldSuffix is defined, that is used to create the subFields.
      Example: if subFieldType="double", then the coordinates would be
        indexed in fields myloc_0___double,myloc_1___double.
      Example: if subFieldSuffix="_d" then the coordinates would be indexed
        in fields myloc_0_d,myloc_1_d
      The subFields are an implementation detail of the fieldType, and end
      users normally should not need to know about them.
     -->
    <fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d"/>

    <!-- A specialized field for geospatial search filters and distance sorting. -->
    <fieldType name="location" class="solr.LatLonPointSpatialField" distanceUnits="kilometers" docValues="true"/>

    <!-- An alternative geospatial field type new to Solr 4.  It supports multiValued and polygon shapes.
      For more information about this and other Spatial fields new to Solr 4, see:
      http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4
    -->
    <fieldType name="location_rpt" class="solr.SpatialRecursivePrefixTreeFieldType"
               geo="true" distErrPct="0.025" maxDistErr="0.001" distanceUnits="kilometers" />

    <!-- Money/currency field type. See http://wiki.apache.org/solr/MoneyFieldType
         Parameters:
           defaultCurrency: Specifies the default currency if none specified. Defaults to "USD"
           precisionStep:   Specifies the precisionStep for the TrieLong field used for the amount
           providerClass:   Lets you plug in other exchange provider backend:
                            solr.FileExchangeRateProvider is the default and takes one parameter:
                              currencyConfig: name of an xml file holding exchange rates
                            solr.OpenExchangeRatesOrgProvider uses rates from openexchangerates.org:
                              ratesFileLocation: URL or path to rates JSON file (default latest.json on the web)
                              refreshInterval: Number of minutes between each rates fetch (default: 1440, min: 60)
    -->
    <!--<fieldType name="currency" class="solr.CurrencyField" precisionStep="8" defaultCurrency="USD" currencyConfig="currency.xml" />-->



    <!-- some examples for different languages (generally ordered by ISO code) -->

    <!--&lt;!&ndash; Arabic &ndash;&gt;-->
    <!--<fieldType name="text_ar" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--&lt;!&ndash; for any non-arabic &ndash;&gt;-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_ar.txt" />-->
            <!--&lt;!&ndash; normalizes ﻯ to ﻱ, etc &ndash;&gt;-->
            <!--<filter class="solr.ArabicNormalizationFilterFactory"/>-->
            <!--<filter class="solr.ArabicStemFilterFactory"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Bulgarian &ndash;&gt;-->
    <!--<fieldType name="text_bg" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_bg.txt" />-->
            <!--<filter class="solr.BulgarianStemFilterFactory"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Catalan &ndash;&gt;-->
    <!--<fieldType name="text_ca" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--&lt;!&ndash; removes l', etc &ndash;&gt;-->
            <!--<filter class="solr.ElisionFilterFactory" ignoreCase="true" articles="lang/contractions_ca.txt"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_ca.txt" />-->
            <!--<filter class="solr.SnowballPorterFilterFactory" language="Catalan"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; CJK bigram (see text_ja for a Japanese configuration using morphological analysis) &ndash;&gt;-->
    <!--<fieldType name="text_cjk" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--&lt;!&ndash; normalize width before bigram, as e.g. half-width dakuten combine  &ndash;&gt;-->
            <!--<filter class="solr.CJKWidthFilterFactory"/>-->
            <!--&lt;!&ndash; for any non-CJK &ndash;&gt;-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.CJKBigramFilterFactory"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Kurdish &ndash;&gt;-->
    <!--<fieldType name="text_ckb" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.SoraniNormalizationFilterFactory"/>-->
            <!--&lt;!&ndash; for any latin text &ndash;&gt;-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_ckb.txt"/>-->
            <!--<filter class="solr.SoraniStemFilterFactory"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Czech &ndash;&gt;-->
    <!--<fieldType name="text_cz" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_cz.txt" />-->
            <!--<filter class="solr.CzechStemFilterFactory"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Danish &ndash;&gt;-->
    <!--<fieldType name="text_da" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_da.txt" format="snowball" />-->
            <!--<filter class="solr.SnowballPorterFilterFactory" language="Danish"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; German &ndash;&gt;-->
    <!--<fieldType name="text_de" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_de.txt" format="snowball" />-->
            <!--<filter class="solr.GermanNormalizationFilterFactory"/>-->
            <!--<filter class="solr.GermanLightStemFilterFactory"/>-->
            <!--&lt;!&ndash; less aggressive: <filter class="solr.GermanMinimalStemFilterFactory"/> &ndash;&gt;-->
            <!--&lt;!&ndash; more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="German2"/> &ndash;&gt;-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Greek &ndash;&gt;-->
    <!--<fieldType name="text_el" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--&lt;!&ndash; greek specific lowercase for sigma &ndash;&gt;-->
            <!--<filter class="solr.GreekLowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="false" words="lang/stopwords_el.txt" />-->
            <!--<filter class="solr.GreekStemFilterFactory"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Spanish &ndash;&gt;-->
    <!--<fieldType name="text_es" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_es.txt" format="snowball" />-->
            <!--<filter class="solr.SpanishLightStemFilterFactory"/>-->
            <!--&lt;!&ndash; more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="Spanish"/> &ndash;&gt;-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Basque &ndash;&gt;-->
    <!--<fieldType name="text_eu" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_eu.txt" />-->
            <!--<filter class="solr.SnowballPorterFilterFactory" language="Basque"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Persian &ndash;&gt;-->
    <!--<fieldType name="text_fa" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--&lt;!&ndash; for ZWNJ &ndash;&gt;-->
            <!--<charFilter class="solr.PersianCharFilterFactory"/>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.ArabicNormalizationFilterFactory"/>-->
            <!--<filter class="solr.PersianNormalizationFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_fa.txt" />-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Finnish &ndash;&gt;-->
    <!--<fieldType name="text_fi" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_fi.txt" format="snowball" />-->
            <!--<filter class="solr.SnowballPorterFilterFactory" language="Finnish"/>-->
            <!--&lt;!&ndash; less aggressive: <filter class="solr.FinnishLightStemFilterFactory"/> &ndash;&gt;-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; French &ndash;&gt;-->
    <!--<fieldType name="text_fr" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--&lt;!&ndash; removes l', etc &ndash;&gt;-->
            <!--<filter class="solr.ElisionFilterFactory" ignoreCase="true" articles="lang/contractions_fr.txt"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_fr.txt" format="snowball" />-->
            <!--<filter class="solr.FrenchLightStemFilterFactory"/>-->
            <!--&lt;!&ndash; less aggressive: <filter class="solr.FrenchMinimalStemFilterFactory"/> &ndash;&gt;-->
            <!--&lt;!&ndash; more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="French"/> &ndash;&gt;-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Irish &ndash;&gt;-->
    <!--<fieldType name="text_ga" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--&lt;!&ndash; removes d', etc &ndash;&gt;-->
            <!--<filter class="solr.ElisionFilterFactory" ignoreCase="true" articles="lang/contractions_ga.txt"/>-->
            <!--&lt;!&ndash; removes n-, etc. position increments is intentionally false! &ndash;&gt;-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/hyphenations_ga.txt"/>-->
            <!--<filter class="solr.IrishLowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_ga.txt"/>-->
            <!--<filter class="solr.SnowballPorterFilterFactory" language="Irish"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Galician &ndash;&gt;-->
    <!--<fieldType name="text_gl" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_gl.txt" />-->
            <!--<filter class="solr.GalicianStemFilterFactory"/>-->
            <!--&lt;!&ndash; less aggressive: <filter class="solr.GalicianMinimalStemFilterFactory"/> &ndash;&gt;-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Hindi &ndash;&gt;-->
    <!--<fieldType name="text_hi" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--&lt;!&ndash; normalizes unicode representation &ndash;&gt;-->
            <!--<filter class="solr.IndicNormalizationFilterFactory"/>-->
            <!--&lt;!&ndash; normalizes variation in spelling &ndash;&gt;-->
            <!--<filter class="solr.HindiNormalizationFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_hi.txt" />-->
            <!--<filter class="solr.HindiStemFilterFactory"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Hungarian &ndash;&gt;-->
    <!--<fieldType name="text_hu" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_hu.txt" format="snowball" />-->
            <!--<filter class="solr.SnowballPorterFilterFactory" language="Hungarian"/>-->
            <!--&lt;!&ndash; less aggressive: <filter class="solr.HungarianLightStemFilterFactory"/> &ndash;&gt;-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Armenian &ndash;&gt;-->
    <!--<fieldType name="text_hy" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_hy.txt" />-->
            <!--<filter class="solr.SnowballPorterFilterFactory" language="Armenian"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Indonesian &ndash;&gt;-->
    <!--<fieldType name="text_id" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_id.txt" />-->
            <!--&lt;!&ndash; for a less aggressive approach (only inflectional suffixes), set stemDerivational to false &ndash;&gt;-->
            <!--<filter class="solr.IndonesianStemFilterFactory" stemDerivational="true"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Italian &ndash;&gt;-->
    <!--<fieldType name="text_it" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--&lt;!&ndash; removes l', etc &ndash;&gt;-->
            <!--<filter class="solr.ElisionFilterFactory" ignoreCase="true" articles="lang/contractions_it.txt"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_it.txt" format="snowball" />-->
            <!--<filter class="solr.ItalianLightStemFilterFactory"/>-->
            <!--&lt;!&ndash; more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="Italian"/> &ndash;&gt;-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Japanese using morphological analysis (see text_cjk for a configuration using bigramming)-->

         <!--NOTE: If you want to optimize search for precision, use default operator AND in your query-->
         <!--parser config with <solrQueryParser defaultOperator="AND"/> further down in this file.  Use -->
         <!--OR if you would like to optimize for recall (default).-->
    <!--&ndash;&gt;-->
    <!--<fieldType name="text_ja" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="false">-->
        <!--<analyzer>-->
            <!--&lt;!&ndash; Kuromoji Japanese morphological analyzer/tokenizer (JapaneseTokenizer)-->

                 <!--Kuromoji has a search mode (default) that does segmentation useful for search.  A heuristic-->
                 <!--is used to segment compounds into its parts and the compound itself is kept as synonym.-->

                 <!--Valid values for attribute mode are:-->
                    <!--normal: regular segmentation-->
                    <!--search: segmentation useful for search with synonyms compounds (default)-->
                  <!--extended: same as search mode, but unigrams unknown words (experimental)-->

                 <!--For some applications it might be good to use search mode for indexing and normal mode for-->
                 <!--queries to reduce recall and prevent parts of compounds from being matched and highlighted.-->
                 <!--Use <analyzer type="index"> and <analyzer type="query"> for this and mode normal in query.-->

                 <!--Kuromoji also has a convenient user dictionary feature that allows overriding the statistical-->
                 <!--model with your own entries for segmentation, part-of-speech tags and readings without a need-->
                 <!--to specify weights.  Notice that user dictionaries have not been subject to extensive testing.-->

                 <!--User dictionary attributes are:-->
                           <!--userDictionary: user dictionary filename-->
                   <!--userDictionaryEncoding: user dictionary encoding (default is UTF-8)-->

                 <!--See lang/userdict_ja.txt for a sample user dictionary file.-->

                 <!--Punctuation characters are discarded by default.  Use discardPunctuation="false" to keep them.-->

                 <!--See http://wiki.apache.org/solr/JapaneseLanguageSupport for more on Japanese language support.-->
              <!--&ndash;&gt;-->
            <!--<tokenizer class="solr.JapaneseTokenizerFactory" mode="search"/>-->
            <!--&lt;!&ndash;<tokenizer class="solr.JapaneseTokenizerFactory" mode="search" userDictionary="lang/userdict_ja.txt"/>&ndash;&gt;-->
            <!--&lt;!&ndash; Reduces inflected verbs and adjectives to their base/dictionary forms (辞書形) &ndash;&gt;-->
            <!--<filter class="solr.JapaneseBaseFormFilterFactory"/>-->
            <!--&lt;!&ndash; Removes tokens with certain part-of-speech tags &ndash;&gt;-->
            <!--<filter class="solr.JapanesePartOfSpeechStopFilterFactory" tags="lang/stoptags_ja.txt" />-->
            <!--&lt;!&ndash; Normalizes full-width romaji to half-width and half-width kana to full-width (Unicode NFKC subset) &ndash;&gt;-->
            <!--<filter class="solr.CJKWidthFilterFactory"/>-->
            <!--&lt;!&ndash; Removes common tokens typically not useful for search, but have a negative effect on ranking &ndash;&gt;-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_ja.txt" />-->
            <!--&lt;!&ndash; Normalizes common katakana spelling variations by removing any last long sound character (U+30FC) &ndash;&gt;-->
            <!--<filter class="solr.JapaneseKatakanaStemFilterFactory" minimumLength="4"/>-->
            <!--&lt;!&ndash; Lower-cases romaji characters &ndash;&gt;-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Latvian &ndash;&gt;-->
    <!--<fieldType name="text_lv" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_lv.txt" />-->
            <!--<filter class="solr.LatvianStemFilterFactory"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Dutch &ndash;&gt;-->
    <!--<fieldType name="text_nl" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_nl.txt" format="snowball" />-->
            <!--<filter class="solr.StemmerOverrideFilterFactory" dictionary="lang/stemdict_nl.txt" ignoreCase="false"/>-->
            <!--<filter class="solr.SnowballPorterFilterFactory" language="Dutch"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Norwegian &ndash;&gt;-->
    <!--<fieldType name="text_no" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_no.txt" format="snowball" />-->
            <!--<filter class="solr.SnowballPorterFilterFactory" language="Norwegian"/>-->
            <!--&lt;!&ndash; less aggressive: <filter class="solr.NorwegianLightStemFilterFactory" variant="nb"/> &ndash;&gt;-->
            <!--&lt;!&ndash; singular/plural: <filter class="solr.NorwegianMinimalStemFilterFactory" variant="nb"/> &ndash;&gt;-->
            <!--&lt;!&ndash; The "light" and "minimal" stemmers support variants: nb=Bokmål, nn=Nynorsk, no=Both &ndash;&gt;-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Portuguese &ndash;&gt;-->
    <!--<fieldType name="text_pt" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_pt.txt" format="snowball" />-->
            <!--<filter class="solr.PortugueseLightStemFilterFactory"/>-->
            <!--&lt;!&ndash; less aggressive: <filter class="solr.PortugueseMinimalStemFilterFactory"/> &ndash;&gt;-->
            <!--&lt;!&ndash; more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="Portuguese"/> &ndash;&gt;-->
            <!--&lt;!&ndash; most aggressive: <filter class="solr.PortugueseStemFilterFactory"/> &ndash;&gt;-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Romanian &ndash;&gt;-->
    <!--<fieldType name="text_ro" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_ro.txt" />-->
            <!--<filter class="solr.SnowballPorterFilterFactory" language="Romanian"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Russian &ndash;&gt;-->
    <!--<fieldType name="text_ru" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_ru.txt" format="snowball" />-->
            <!--<filter class="solr.SnowballPorterFilterFactory" language="Russian"/>-->
            <!--&lt;!&ndash; less aggressive: <filter class="solr.RussianLightStemFilterFactory"/> &ndash;&gt;-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Swedish &ndash;&gt;-->
    <!--<fieldType name="text_sv" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_sv.txt" format="snowball" />-->
            <!--<filter class="solr.SnowballPorterFilterFactory" language="Swedish"/>-->
            <!--&lt;!&ndash; less aggressive: <filter class="solr.SwedishLightStemFilterFactory"/> &ndash;&gt;-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Thai &ndash;&gt;-->
    <!--<fieldType name="text_th" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.LowerCaseFilterFactory"/>-->
            <!--<filter class="solr.ThaiWordFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_th.txt" />-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!--&lt;!&ndash; Turkish &ndash;&gt;-->
    <!--<fieldType name="text_tr" class="solr.TextField" positionIncrementGap="100">-->
        <!--<analyzer>-->
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <!--<filter class="solr.ApostropheFilterFactory"/>-->
            <!--<filter class="solr.TurkishLowerCaseFilterFactory"/>-->
            <!--<filter class="solr.StopFilterFactory" ignoreCase="false" words="lang/stopwords_tr.txt" />-->
            <!--<filter class="solr.SnowballPorterFilterFactory" language="Turkish"/>-->
        <!--</analyzer>-->
    <!--</fieldType>-->

    <!-- Similarity is the scoring routine for each document vs. a query.
         A custom Similarity or SimilarityFactory may be specified here, but
         the default is fine for most applications.
         For more info: http://wiki.apache.org/solr/SchemaXml#Similarity
      -->
    <!--
       <similarity class="com.example.solr.CustomSimilarityFactory">
         <str name="paramkey">param value</str>
       </similarity>
      -->

    <fieldType name="srptgeom"
               class="solr.RptWithGeometrySpatialField"
               spatialContextFactory="JTS"
               distanceUnits="degrees"
               format="WKT"
               autoIndex="true"
               allowMultiOverlap="true" />

</schema>
