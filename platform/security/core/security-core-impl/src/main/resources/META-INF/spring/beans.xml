<?xml version="1.0" encoding="UTF-8"?>
<!-- 
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or any later version. 
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/

 -->
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns="http://www.springframework.org/schema/osgi"
             xsi:schemaLocation="http://www.springframework.org/schema/osgi
        http://www.springframework.org/schema/osgi/spring-osgi.xsd


     http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans.xsd">

  <!-- 
  Spring is necessary for this instance due to the greedy-proxying option.
  This attribute allows the proxy references that are returned to implement all of the super-interfaces. 
  This is crucial in the security api due to the fact that shiro (the underlying security framework) performs
  various 'instanceof' checks which will fail if the incoming reference does not implement the super interfaces.
  
  More information: http://static.springsource.org/osgi/docs/2.0.0.M1/reference/html/service-registry.html 
  "All OSGi services imported by a Spring DM service collection publish and are type-compatible with the classes declared by the interfaces property. 
  However, some services might expose additional (optional) classes that could be relevant to your application.
  For these cases, Spring DM collections offer a dedicated attribute called greedy-proxying which will cause the creates proxies to use all the classes 
  advertised by the imported services, visible to the consuming importing bundle. Thus, it is possible to cast the imported proxies to classes different 
  then those specified in the interfaces."
   -->
    <list id="realmList" interface="org.apache.shiro.realm.Realm" greedy-proxying="true"/>

  <beans:bean name="securityManagerImpl" class="ddf.security.service.impl.SecurityManagerImpl">
    <beans:property name="realms" ref="realmList"/>
  </beans:bean>

  <service id="serviceManager" ref="securityManagerImpl"
           interface="ddf.security.service.SecurityManager"/>

</beans:beans>