<!--
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or any later version. 
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
-->
<blueprint xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xsi:schemaLocation="
  http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"
>

    <reference id="transformerMapper" interface="ddf.mime.MimeTypeToTransformerMapper"/>

    <reference id="mimeTypeMapper" interface="ddf.mime.MimeTypeMapper"/>

    <reference id="framework" interface="ddf.catalog.CatalogFramework"/>

    <reference id="uuidGenerator"
               interface="org.codice.ddf.platform.util.uuidgenerator.UuidGenerator"
               filter="(id=uuidGenerator)"/>

    <!--
    Instantiate our custom Camel CatalogComponent and inject this bundle context into it.  
    -->
    <bean id="catalogComponent" class="ddf.camel.component.catalog.CatalogComponent">
        <property name="bundleContext" ref="blueprintBundleContext"/>
        <property name="mimeTypeToTransformerMapper" ref="transformerMapper"/>
        <property name="catalogFramework" ref="framework"/>
        <property name="mimeTypeMapper" ref="mimeTypeMapper"/>
    </bean>

    <!--
    Used by Camel framework to resolve "catalog" scheme in route nodes.
    -->
    <bean id="catalogComponentResolver"
          class="ddf.camel.component.catalog.CatalogComponentResolver">
        <argument ref="catalogComponent"/>
    </bean>

    <!--
    Registers custom Camel catalogComponentResolver as a Camel ComponentResolver and
    sets service property indicating that the component it can resolve is named "catalog".
    This is how we insert our own Camel component resolver into the Camel component resolution
    chain so that route nodes using our custom "catalog" scheme can be resolved.
    -->
    <service ref="catalogComponentResolver" interface="org.apache.camel.spi.ComponentResolver">
        <service-properties>
            <entry key="component" value="catalog"/>
        </service-properties>
    </service>

    <!--
    Instantiate our custom Camel ContentComponent and inject this bundle context into it.
    -->
    <bean id="contentComponent" class="ddf.camel.component.catalog.content.ContentComponent">
        <property name="catalogFramework" ref="framework"/>
        <property name="mimeTypeMapper" ref="mimeTypeMapper"/>
        <property name="uuidGenerator" ref="uuidGenerator"/>
    </bean>

    <!--
    Used by Camel framework to resolve "content" scheme in route nodes.
    -->
    <bean id="contentComponentResolver"
          class="ddf.camel.component.catalog.content.ContentComponentResolver">
        <argument ref="contentComponent"/>
    </bean>

    <!--
    Registers custom Camel contentComponentResolver as a Camel ComponentResolver and
    sets service property indicating that the component it can resolve is named "content".
    This is how we insert our own Camel component resolver into the Camel component resolution
    chain so that route nodes using our custom "content" scheme can be resolved.
    -->
    <service ref="contentComponentResolver" interface="org.apache.camel.spi.ComponentResolver">
        <service-properties>
            <entry key="component" value="content"/>
        </service-properties>
    </service>

</blueprint>