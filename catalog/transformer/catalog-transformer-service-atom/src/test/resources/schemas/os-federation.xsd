<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns:fs="http://a9.com/-/opensearch/extensions/federation/1.0/"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="http://a9.com/-/opensearch/extensions/federation/1.0/"
           elementFormDefault="qualified">


  <xs:element name="resultSource" type="fs:resultSourceType">
    <xs:annotation>
      <xs:documentation>
        The resultSource element MUST be included with each item returned in the search results, and
        indicates which back-end source(s) returned it. If de-duplication is applied during processing, multiple sources
        MAY be associated with the same result.
    </xs:documentation>
    </xs:annotation>
    
  </xs:element>
  <xs:element name="queryId" type="xs:string">
    <xs:annotation>
      <xs:documentation>
        A broker MAY include a queryId element in its response to indicate that it supports interaction
        with the cached
        query result set.The queryId element MUST contain a string that identifies a result set cached by
        the broker.
        The consumer MAY pass the string as the value of the queryId parameter in subsequent requests. If the
        result set
        referenced by a queryId has been removed from the cache, the broker must return a QueryIdExpired
        exception.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="sourceStatus" type="fs:sourceStatusType">
    <xs:annotation>
      <xs:documentation>
        A broker MAY include a sourceStatus element to give the consumer diagnostic information on the overall progress of a
        search request, and information on each source that was included in the request. If the broker supports the
        includeStatus parameter, then sourceStatus elements MUST be provided in the response if the consumer requests
        them by setting fs:includeStatus=1 in the request. When included, there MUST be one sourceStatus element for
        each source requested. The sourceStatus element MAY be extended with elements from another XML namespace to
        provide additional information that the broker implementation can provide.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="resultSourceType">
    <xs:simpleContent>
      <xs:extension base="fs:shortName">
        <xs:attribute name="sourceId" form="qualified" use="required" type="xs:string"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="sourceStatusType">
    <xs:all>
      <xs:element name="shortName" type="fs:shortName"/>
      <xs:element name="status">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="excluded"/>
            <xs:enumeration value="waiting"/>
            <xs:enumeration value="error"/>
            <xs:enumeration value="timeout"/>
            <xs:enumeration value="processing"/>
            <xs:enumeration value="complete"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="resultsRetrieved" minOccurs="0" type="xs:double"/>
      <xs:element name="totalResults" minOccurs="0" type="xs:double"/>
      <xs:element name="elapsedTime" minOccurs="0" type="xs:double"/>
    </xs:all>
  </xs:complexType>

  <xs:simpleType name="shortName">
    <xs:restriction base="xs:string">
      <xs:maxLength value="16"/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>