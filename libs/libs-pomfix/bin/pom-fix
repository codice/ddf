#!/usr/bin/env node

/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/

var chalk = require('chalk')
var es = require('event-stream')
var program = require('commander')
var path = require('path')

var pkg = require('../package.json')
var util = require('../lib/util')
var fix = require('../lib/fix')

var count = 0

var errors = function () {
  return es.mapSync(function (entry) {
    count++
    return chalk.red('found missing dependencies: ') + entry.path +
    '\n' + entry.deps.map(function (dep) {
      return '    mvn:' + dep.group + '/' + dep.artifact + '/' + dep.version
    }).join('\n') + '\n'
  })
}

var pass = function () {
  return es.mapSync(function (data) {
    return data
  })
}

var list = function (val) { return val.split(',') }

program
  .version(pkg.version)
  .option('-a, --apply', 'apply fixes to files in-place')
  .option('-d, --dir <path>', 'directory to run in, default is pwd')
  .option('-i, --include <items>', 'comma seperated list of group ids to include in a pom if found missing', list)
  .allowUnknownOption()
  .parse(process.argv)

var apply = function () {
  if (program.apply) {
    return util.write()
  } else {
    return pass() // pass through if not applying changes
  }
}

var options = {
  include: {
    group: [/^org\.codice/, /^ddf/].concat(program.include || [])
  },
  exclude: {
    artifact: ['docs', /^sample-/],
    type: ['javadoc']
  }
}

var rootDir = path.resolve(program.dir || '')
var bin = path.basename(process.argv[1])

console.log('Running ' +  chalk.blue(bin) + ' from ' + chalk.green(rootDir))

util.find(rootDir, [ '!libs-pomfix' ])
  .pipe(util.read())
  .pipe(fix(util.load, options))
  .pipe(apply())
  .pipe(errors())
  .on('end', function () {
    if (count > 0) process.exit(1)
  })
  .pipe(process.stderr)
