#!/usr/bin/env bash

# Capture start|stop|restart command
# Set a default value in the event no arguments are provided
COMMAND=$1
shift

# -----------------------------------------------------------------------------
usage() {
    echo "Usage: $0 {start|stop|restart} " >&2; exit 1;
}

# -----------------------------------------------------------------------------
if [ -z  "$COMMAND" ]; then
    echo "Missing command" >&2
    usage
fi

if  ! ( [ "$COMMAND" == "start" ] || [ "$COMMAND" == "stop" ] || [ "$COMMAND" == "restart" ] ); then
    echo "Unknown command: $COMMAND" >&2
    usage
fi

lowercase() {
 echo "$1" | tr '[:upper:]' '[:lower:]'
}

SCRIPTDIR=$(dirname $0)
HOME_DIR=$(cd "${SCRIPTDIR}/.."; pwd -P)
GET=${SCRIPTDIR}/get_property
SOLR_EXEC=${HOME_DIR}/solr/bin/solr

# Read port from system.properties file
SOLR_PORT=$($GET "solr.http.port")

# Do not proceed if required properties are missing
if [ -z "$SOLR_PORT" ]; then
    echo "Cannot determine Solr port from system.properties file. Exiting."
    exit 2
fi

# Set special environment variables used by Solr to configure TLS
set_security_properties() {
      # Use the same key and trust stores as DDF
      export SOLR_SSL_KEY_STORE=$HOME_DIR/$($GET javax.net.ssl.keyStore)
      export SOLR_SSL_KEY_STORE_PASSWORD=$($GET javax.net.ssl.keyStorePassword)
      export SOLR_SSL_KEY_STORE_TYPE=$($GET javax.net.ssl.keyStoreType)
      export SOLR_SSL_TRUST_STORE=$HOME_DIR/$($GET javax.net.ssl.trustStore)
      export SOLR_SSL_TRUST_STORE_PASSWORD=$($GET javax.net.ssl.trustStorePassword)
      export SOLR_SSL_TRUST_STORE_TYPE=$($GET javax.net.ssl.trustStoreType)

      # Require two-way TLS. Change this value to false to disable client authentication.
      export SOLR_SSL_NEED_CLIENT_AUTH=true

      # Not used. From Solr 7.4 docs:
      #    Enable either SOLR_SSL_NEED_CLIENT_AUTH or SOLR_SSL_WANT_CLIENT_AUTH but not both at
      #    the same time. They are mutually exclusive and Jetty will select one of them which
      #    may not be what you expect.
      export SOLR_SSL_WANT_CLIENT_AUTH=false
}


start_solr() {
    if [ "$SOLR_UNSECURE" != "true" ]; then
        set_security_properties
    fi

    $SOLR_EXEC $1 -force -p $SOLR_PORT
    local rc=$?
    print_messages $rc
    return $rc
}

print_messages() {
    if [ $1 -eq 0 ]; then
        if [ "$SOLR_UNSECURE" != "true" ]; then
            echo "Using Solr secure configuration" >&2
        else
            echo "**** USING UNSECURED SOLR CONFIGURATION ****" >&2
        fi
    fi
}


if [ "$COMMAND" = "stop" ]; then
    $SOLR_EXEC stop -p $SOLR_PORT
else
    # Read protocol from properties file
    SOLR_PROTOCOL=$($GET "solr.http.protocol")

    # Do not proceed if required properties are missing
    if [ -z "$SOLR_PROTOCOL" ]; then
        echo "Cannot determine Solr protocol (http or https) from system.properties file. Exiting."
        exit 3
    fi

    # Normalize
    SOLR_PROTOCOL=$(lowercase $SOLR_PROTOCOL)

    # Verify
    if  ( [ "$SOLR_PROTOCOL" != "https" ] && [ "$SOLR_PROTOCOL" != "http" ] ); then
        echo "Unkown Solr protocol \"$SOLR_PROTOCOL\" found in system.properties file"
        echo "Expected \"http\" or \"https\". Exiting";
        exit 4
    fi

    # Determine desired security configuration
    if [ "$SOLR_PROTOCOL" = "http" ]; then
        SOLR_UNSECURE="true"
    fi

    start_solr $COMMAND
fi
