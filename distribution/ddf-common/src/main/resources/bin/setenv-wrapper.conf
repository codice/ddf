# Log format to include log level, prefix, milliseconds, and the message
wrapper.console.format=LPZM

# Enables restart of JVM when it exits with 10. 10 is normally used by the karaf script to
# indicate a restart
wrapper.on_exit.10 = RESTART

# Defines a command file to be used by the ddf_on_error.sh script when executed following
# a non-recoverable system error and the JVM should be restarted
wrapper.commandfile = %KARAF_HOME%/bin/restart.jvm

# Additional JVM parameters
# note that n is the parameter number starting from 11 (1-10 is defined in ddf-wrapper.conf).
# ### make sure there is no gap renumber remaining parameters if you add, remove or uncomment lines
wrapper.java.additional.11 = -Dddf.home=%KARAF_HOME%
wrapper.java.additional.12 = -Dddf.home.policy=%KARAF_HOME%/
wrapper.java.additional.13 = -server
wrapper.java.additional.14 = -Dfile.encoding=UTF8
wrapper.java.additional.15 = -Dkaraf.instances=%KARAF_HOME%/instances
wrapper.java.additional.16 = -Dkaraf.restart.jvm.supported=true
wrapper.java.additional.17 = -Djava.io.tmpdir=%KARAF_HOME%/data/tmp
wrapper.java.additional.18 = -Djava.util.logging.config.file=%KARAF_HOME%/etc/java.util.logging.properties
wrapper.java.additional.19 = -XX:+UnlockDiagnosticVMOptions
wrapper.java.additional.20 = -XX:+DisableAttachMechanism
wrapper.java.additional.21 = -XX:+UnsyncloadClass
wrapper.java.additional.22 = -Djava.awt.headless=true

# Enables MBean support for the service wrapper; used to trigger restart
wrapper.java.additional.23 = -Dorg.tanukisoftware.wrapper.WrapperManager.mbean=TRUE

# Prefer /dev/urandom over /dev/random on Linux systems.
wrapper.java.additional.24 = -Djava.security.egd=file:/dev/./urandom

# Error handling scripts
wrapper.java.additional.25 = -XX:OnOutOfMemoryError=%KARAF_HOME%/bin/ddf_on_error.sh wrapper %p
wrapper.java.additional.26 = -XX:OnError=%KARAF_HOME%/bin/ddf_on_error.sh wrapper %p

# The Security Manager is turned off by default in DDF.
# N.B. The use of the double equals on the 'java.security.policy' property is intentional.
# See http://docs.oracle.com/javase/7/docs/technotes/guides/security/PolicyFiles.html#DefaultLocs
# for more information.
# wrapper.java.additional.27 = -Djava.security.policy==%KARAF_HOME%/security/default.policy
# wrapper.java.additional.28 = -Dpolicy.provider=net.sourceforge.prograde.policy.ProGradePolicy
# wrapper.java.additional.29 = -DproGrade.getPermissions.override=sun.rmi.server.LoaderHandler:loadClass,org.apache.jasper.compiler.JspRuntimeContext:initSecurity
#
# Admins can uncomment the following 3 lines and comment out the other definition of
# the java.security.manager property in order to determine any missing security permissions
# should they install third-party bundles requiring additional access.
#
# Please note that turning on the PolicyFileGeneratorJSM has the side-effect of turning off
# security on your system. It should be used with caution, only to ascertain missing
# permissions to be added to the default.policy file.
#
# wrapper.java.additional.30 = -Djava.security.manager=net.sourceforge.prograde.sm.PolicyFileGeneratorJSM
# wrapper.java.additional.31 = -Dprograde.generated.policy=%KARAF_HOME%/generated.policy
# wrapper.java.additional.32 = -Dprograde.use.own.policy=true
#
# Production Security Permissions
# wrapper.java.additional.30 = -Djava.security.manager=net.sourceforge.prograde.sm.ProGradeJSM

# Uncomment to enable cxf logging interceptors
# wrapper.java.additional.31 = -Dcom.sun.xml.ws.transport.http.HttpAdapter.dump=true

# Set the JVM initial and max heap space as desired
wrapper.java.initmemory = 2048
wrapper.java.maxmemory = 4096

