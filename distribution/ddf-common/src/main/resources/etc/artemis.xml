<!-- /**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/ -->
<configuration xmlns="urn:activemq"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xi="http://www.w3.org/2001/XInclude"
               xsi:schemaLocation="urn:activemq /schema/artemis-configuration.xsd">

   <core xmlns="urn:activemq:core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="urn:activemq:core ">

        <name>artemis</name>

        <broker-plugins>
            <broker-plugin class-name="org.codice.ddf.broker.security.BrokerAuthenticationPlugin" />
        </broker-plugins>

        <persistence-enabled>true</persistence-enabled>

      <!-- this could be ASYNCIO, MAPPED, NIO
           ASYNCIO: Linux Libaio
           MAPPED: mmap files
           NIO: Plain Java Files
       -->
        <journal-type>NIO</journal-type>
        <paging-directory>${ddf.data:.}/artemis/paging</paging-directory>
        <bindings-directory>${ddf.data:.}/artemis/bindings</bindings-directory>
        <journal-directory>${ddf.data:.}/artemis/journal</journal-directory>
        <large-messages-directory>${ddf.data:.}/artemis/large-messages</large-messages-directory>

        <journal-datasync>true</journal-datasync>

        <journal-min-files>2</journal-min-files>

        <journal-pool-files>10</journal-pool-files>

        <journal-file-size>10M</journal-file-size>

        <!--
         This value was determined through a calculation.
         Your system could perform 16.67 writes per millisecond
         on the current journal configuration.
         That translates as a sync write every 59999 nanoseconds.

         Note: If you specify 0 the system will perform writes directly to the disk.
               We recommend this to be 0 if you are using journalType=MAPPED and ournal-datasync=false.
        -->
        <journal-buffer-timeout>59999</journal-buffer-timeout>


        <!--
          When using ASYNCIO, this will determine the writing queue depth for libaio.
         -->
        <journal-max-io>1</journal-max-io>
        <!--
        You can verify the network health of a particular NIC by specifying the <network-check-NIC> element.
         <network-check-NIC>theNicName</network-check-NIC>
          -->

        <!--
          Use this to use an HTTP server to validate the network
        <network-check-URL-list>http://www.apache.org</network-check-URL-list> -->

        <network-check-period>10000</network-check-period>
        <!-- This value should not be changed from 255 -->
        <network-check-timeout>255</network-check-timeout>

        <!-- this is a comma separated list, no spaces, just DNS or IPs
             it should accept IPV6

             Warning: Make sure you understand your network topology as this is meant to validate if your network is valid.
                      Using IPs that could eventually disappear or be partially visible may defeat the purpose.
                      You can use a list of multiple IPs, and if any successful ping will make the server OK to continue running -->
        <network-check-list>${artemis.network.iplist}</network-check-list>

        <!-- use this to customize the ping used for ipv4 addresses -->
        <!-- this will need to be updated to `ping -n %d %s`  on windows -->
        <!-- <network-check-ping-command>ping -c 1 -t %d %s</network-check-ping-command> -->

        <!-- use this to customize the ping used for ipv6 addresses -->
        <!-- this will need to be updated to `ping -n %d %s`  on windows -->
        <!-- <network-check-ping6-command>ping6 -c 1 %2$s</network-check-ping6-command> -->

        <message-expiry-scan-period>1000</message-expiry-scan-period>

        <!-- how often we are looking for how many bytes are being used on the disk in ms -->
        <disk-scan-period>5000</disk-scan-period>

        <!-- once the disk hits this limit the system will block, or close the connection in certain protocols
       that won't support flow control. -->
        <max-disk-usage>${artemis.diskusage:95}</max-disk-usage>

        <!-- should the broker detect dead locks and other issues -->
        <critical-analyzer>true</critical-analyzer>

        <critical-analyzer-timeout>120000</critical-analyzer-timeout>

        <critical-analyzer-check-period>60000</critical-analyzer-check-period>

        <critical-analyzer-policy>HALT</critical-analyzer-policy>

        <!-- the system will enter into page mode once you hit this limit.
           This is an estimate in bytes of how much the messages are using in memory

            The system will use half of the available memory (-Xmx) by default for the global-max-size.
            You may specify a different value here if you need to customize it to your needs.

           -->
                <global-max-size>504857600</global-max-size>

        <ha-policy>
            <replication>
                <master>
                    <!--we need this for auto failback-->
                    <check-for-live-server>true</check-for-live-server>
                </master>
            </replication>
        </ha-policy>

        <!-- @formatter:off-->
        <!-- Connectors -->
        <connectors>
            <connector name="netty-connector">tcp://${artemis.live.host}:${artemis.multiprotocol.port}?sslEnabled=true;keyStorePath=${javax.net.ssl.keyStore};keyStorePassword=${javax.net.ssl.keyStorePassword};enabledCipherSuites=${https.cipherSuites};enabledProtocols=${https.protocols}</connector>
            <connector name="netty-backup-connector">tcp://${artemis.backup.host}:${artemis.multiprotocol.port}?sslEnabled=true;keyStorePath=${javax.net.ssl.keyStore};keyStorePassword=${javax.net.ssl.keyStorePassword};enabledCipherSuites=${https.cipherSuites};enabledProtocols=${https.protocols}</connector>
        </connectors>

        <!-- Acceptors -->
        <acceptors>
            <!-- useEpoll means: it will use Netty epoll if you are on a system (Linux) that supports it -->
            <!-- amqpCredits: The number of credits sent to AMQP producers -->
            <!-- amqpLowCredits: The server will send the # credits specified at amqpCredits at this low mark -->

            <!-- Note: If an acceptor needs to be compatible with HornetQ and/or Artemis 1.x clients add
                       "anycastPrefix=jms.queue.;multicastPrefix=jms.topic." to the acceptor url.
                       See https://issues.apache.org/jira/browse/ARTEMIS-1644 for more information. -->
            <acceptor name="artemis">tcp://0.0.0.0:${artemis.multiprotocol.port}?sslEnabled=true;keyStorePath=${javax.net.ssl.keyStore};keyStorePassword=${javax.net.ssl.keyStorePassword};enabledCipherSuites=${https.cipherSuites};enabledProtocols=${https.protocols};protocols=CORE,AMQP,OPENWIRE;useEpoll=true;amqpCredits=1000;amqpLowCredits=300</acceptor>

            <!-- AMQP Acceptor.  Listens on default AMQP port for AMQP traffic.-->
            <acceptor name="amqp">tcp://0.0.0.0:${artemis.amqp.port}?sslEnabled=true;keyStorePath=${javax.net.ssl.keyStore};keyStorePassword=${javax.net.ssl.keyStorePassword};enabledCipherSuites=${https.cipherSuites};enabledProtocols=${https.protocols};protocols=AMQP;useEpoll=true;amqpCredits=1000;amqpLowCredits=300</acceptor>

             <!-- performance tests have shown that openWire performs best with these buffer sizes -->
            <acceptor name="openwire">tcp://0.0.0.0:${artemis.openwire.port}?sslEnabled=true;keyStorePath=${javax.net.ssl.keyStore};keyStorePassword=${javax.net.ssl.keyStorePassword};enabledCipherSuites=${https.cipherSuites};enabledProtocols=${https.protocols};tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=OPENWIRE;useEpoll=true</acceptor>

        </acceptors>
        <!-- @formatter:on  -->

        <cluster-connections>
            <cluster-connection name="broker-cluster">
                <address>jms</address>
                <connector-ref>netty-connector</connector-ref>
                <static-connectors>
                    <connector-ref>netty-backup-connector</connector-ref>
                </static-connectors>
            </cluster-connection>
        </cluster-connections>

        <grouping-handler name="broker-grouping-handler">
            <type>LOCAL</type>
            <address>jms</address>
            <timeout>5000</timeout>
            <group-timeout>-1</group-timeout>
            <reaper-period>30000</reaper-period>
        </grouping-handler>

        <!-- Other config -->
        <security-invalidation-interval>600000</security-invalidation-interval>

        <!--<password-codec>org.codice.ddf.broker.security.EncryptionCodec</password-codec>
        <mask-password>true</mask-password>-->
        <cluster-user>${artemis.cluster.user:ACTIVEMQ.CLUSTER.ADMIN.USER}</cluster-user>
        <cluster-password>${artemis.cluster.password:CHANGE ME!!}</cluster-password>

        <security-settings>
            <security-setting match="#">
                <permission type="createNonDurableQueue" roles="manager,broker-client"/>
                <permission type="deleteNonDurableQueue" roles="manager,broker-client"/>
                <permission type="createDurableQueue" roles="manager"/>
                <permission type="deleteDurableQueue" roles="manager"/>
                <permission type="createAddress" roles="manager,broker-client"/>
                <permission type="deleteAddress" roles="manager,broker-client"/>
                <permission type="consume" roles="manager,broker-client"/>
                <permission type="browse" roles="manager,broker-client"/>
                <permission type="send" roles="manager,broker-client"/>
                <!-- we need this otherwise ./artemis data imp wouldn't work -->
                <permission type="manage" roles="manager"/>
            </security-setting>
        </security-settings>

        <address-settings>
         <!-- if you define auto-create on certain queues, management has to be auto-create -->
         <address-setting match="activemq.management#">
            <dead-letter-address>DLQ</dead-letter-address>
            <expiry-address>ExpiryQueue</expiry-address>
            <redelivery-delay>0</redelivery-delay>
            <!-- with -1 only the global-max-size is in use for limiting -->
            <max-size-bytes>-1</max-size-bytes>
            <message-counter-history-day-limit>10</message-counter-history-day-limit>
            <address-full-policy>PAGE</address-full-policy>
            <auto-create-queues>true</auto-create-queues>
            <auto-create-addresses>true</auto-create-addresses>
            <auto-create-jms-queues>true</auto-create-jms-queues>
            <auto-create-jms-topics>true</auto-create-jms-topics>
         </address-setting>
            <!--default for catch all-->
            <address-setting match="#">
                <dead-letter-address>DLQ</dead-letter-address>
                <expiry-address>ExpiryQueue</expiry-address>
                <redelivery-delay>0</redelivery-delay>
                <!-- with -1 only the global-max-size is in use for limiting -->
                <max-size-bytes>-1</max-size-bytes>
                <message-counter-history-day-limit>10</message-counter-history-day-limit>
                <address-full-policy>PAGE</address-full-policy>
                <auto-create-queues>true</auto-create-queues>
                <auto-create-addresses>true</auto-create-addresses>
                <auto-create-jms-queues>true</auto-create-jms-queues>
                <auto-create-jms-topics>true</auto-create-jms-topics>
            </address-setting>
        </address-settings>

      <addresses>
         <address name="DLQ">
            <anycast>
               <queue name="DLQ" />
            </anycast>
         </address>
         <address name="ExpiryQueue">
            <anycast>
               <queue name="ExpiryQueue" />
            </anycast>
         </address>

      </addresses>


      <!-- Uncomment the following if you want to use the Standard LoggingActiveMQServerPlugin pluging to log in events
      <broker-plugins>
         <broker-plugin class-name="org.apache.activemq.artemis.core.server.plugin.impl.LoggingActiveMQServerPlugin">
            <property key="LOG_ALL_EVENTS" value="true"/>
            <property key="LOG_CONNECTION_EVENTS" value="true"/>
            <property key="LOG_SESSION_EVENTS" value="true"/>
            <property key="LOG_CONSUMER_EVENTS" value="true"/>
            <property key="LOG_DELIVERING_EVENTS" value="true"/>
            <property key="LOG_SENDING_EVENTS" value="true"/>
            <property key="LOG_INTERNAL_EVENTS" value="true"/>
         </broker-plugin>
      </broker-plugins>
      -->

    </core>
</configuration>
