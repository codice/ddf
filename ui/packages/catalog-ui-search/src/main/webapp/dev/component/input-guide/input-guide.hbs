{{!--
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
 --}}
<div class="section">
    <div class="is-header">
        Examples
    </div>
    <div class="examples is-list has-list-highlighting">
        <div class="example">
            <div class="title">
                Range Input
            </div>
            <div class="instance">
            
            </div>
            <div>
                The view is listening to this input's model.
                Gets blurry when less than 100, rotates hues above 100.
            </div>
             <div class="editor" data-js="showExampleOne"></div>
             <div class="editor" data-js="handleExampleOneValue"></div>
        </div>
        <div class="example">
            <div class="title">
                Date Input
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExampleTwo"></div>
        </div>
        <div class="example">
            <div class="title">
                Location Input
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExampleThree"></div>
        </div>
        <div class="example">
            <div class="title">
                Thumbnail Input
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExampleFour"></div>
        </div>
        <div class="example">
            <div class="title">
                Boolean Input
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExampleFive"></div>
        </div>
        <div class="example">
            <div class="title">
                Geometry Input
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExampleSix"></div>
        </div>
        <div class="example">
            <div class="title">
                Number Input
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExampleSeven"></div>
        </div>
        <div class="example">
            <div class="title">
                Autocomplete Input (not generalized)
            </div>
            <div class="instance">
            
            </div>
            <div>
                As far as I can tell this one needs some further dev before it'll be useful beyond it's current only use.
            </div>
            <div class="editor" data-js="showExampleEight"></div>
        </div>
        <div class="example">
            <div class="title">
                Color Input
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExampleNine"></div>
        </div>
        <div class="example">
            <div class="title">
                Near Input (not generalized)
            </div>
            <div class="instance">
            
            </div>
            <div>
                As far as I can tell this one needs some further dev before it'll be useful beyond it's current only use.
            </div>
            <div class="editor" data-js="showExample10"></div>
        </div>
        <div class="example">
            <div class="title">
                Text Input
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExample11"></div>
        </div>
        <div class="example">
            <div class="title">
                Textarea Input
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExample12"></div>
        </div>
        <div class="example">
            <div class="title">
                Enum Input
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExample13"></div>
        </div>
        <div class="example">
            <div class="title">
                Enum Input with Filtering
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExample14"></div>
        </div>
        <div class="example">
            <div class="title">
                Multi Enum Input with Filtering
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExample15"></div>
        </div>
        <div class="example">
            <div class="title">
                Enum with Validation
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExample16"></div>
        </div>
        <div class="example">
            <div class="title">
                Enum that allows custom values
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExample17"></div>
        </div>
        <div class="example">
            <div class="title">
                Enum that allows custom values but still has validation
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExample18"></div>
        </div>
        <div class="example">
            <div class="title">
                Multi Valued (of any type, in this case enum)
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExample19"></div>
        </div>
        <div class="example">
            <div class="title">
                Bulk (see inspector when more than one result is selected in edit mode)
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExample20"></div>
        </div>
        <div class="example">
            <div class="title">
                Property with Conflicting Definition
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExample21"></div>
        </div>
        <div class="example">
            <div class="title">
                Property that's read only
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExample22"></div>
        </div>
        <div class="example">
            <div class="title">
                Property with Validation Report (error)
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExample23"></div>
        </div>
        <div class="example">
            <div class="title">
                Property with Validation report (warning)
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExample24"></div>
        </div>
        <div class="example">
            <div class="title">
                Property without Label
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExample25"></div>
        </div>
        <div class="example">
            <div class="title">
                Time without Date
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExample26"></div>
        </div>
    </div>
</div>
<div class="section">
    <div class="is-header">
        When to Use
    </div>
    <div class="is-medium-font">
        Utilize inputs to allow users to interact with and change values.

        Typically you'll want to either listen to the model that's passed to them, or collect their values upon submission of a form.
    </div>
</div>
<div class="section">
    <div class="is-header">
        How to Use
    </div>
    <div>
        <div class="is-medium-font">
            Import the property model and property view into your component.  Show the view in a region
            and pass it the model with values that correspond to your needs.

            In some cases you'll pass a model that you keep a reference to so you can listen for value changes.

            In other cases you'll simply get the value at a later time (form submission). 

            The parameters that you pass in to the property model are:
            <ul>
                <li>
                    type
                    <ul>
                        <li>
                            This determines the type of input that's shown.  Possible values are:
                            <ul>
                                <li>
                                    DATE
                                </li>
                                <li>
                                    BINARY
                                </li>
                                <li>
                                    LOCATION
                                </li>
                                <li>
                                    TEXTAREA
                                </li>
                                <li>
                                    BOOLEAN
                                </li>
                                <li>
                                    LONG
                                </li>
                                <li>
                                    DOUBLE
                                </li>
                                <li>
                                    FLOAT
                                </li>
                                <li>
                                    INTEGER
                                </li>
                                <li>
                                    SHORT
                                </li>
                                <li>
                                    RANGE
                                </li>
                                <li>
                                    GEOMETRY
                                </li>
                                <li>
                                    AUTOCOMPLETE
                                </li>
                                <li>
                                    COLOR
                                </li>
                                <li>
                                    NEAR
                                </li>
                                <li>
                                    STRING
                                </li>
                                <li>
                                    XML
                                </li>
                            </ul>
                        </li>
                    </ul>
                </li>
                <li>
                    label
                    <ul>
                        <li>
                            The label you want to display in the UI.
                        </li>
                    </ul>
                </li>
                <li>
                    id (optional)
                    <ul>
                        <li>
                            An identifier in case you want to retrieve this later. 
                            If label is missing, id is used in the UI.
                        </li>
                    </ul>
                </li>
                <li>
                    min (optional)
                    <ul>
                        <li>
                            Used when type is RANGE to set a minimum.
                        </li>
                    </ul>
                </li>
                <li>
                    max (optional)
                    <ul>
                        <li>
                            Used when type is RANGE to set a maximum.
                        </li>
                    </ul>
                </li>
                <li>
                    units (optional)
                    <ul>
                        <li>
                            Used when type is RANGE to set units.
                        </li>
                    </ul>
                </li>
                <li>
                    isEditing (optional)
                    <ul>
                        <li>
                            Used to set the initial edit state.  Default is false.
                        </li>
                    </ul>
                </li>
                <li>
                    value (required)
                    <ul>
                        <li>
                            Used to set the initial value.  This is meant to be an array.
                            If you need to work with a single value, it'll be an array of size one.
                        </li>
                    </ul>
                </li>
                <li>
                    minimumInputLength (optional)
                    <ul>
                        <li>
                            Used when type is AUTOCOMPLETE to adjust when to search.
                        </li>
                    </ul>
                </li>
                <li>
                    url (optional)
                    <ul>
                        <li>
                            Used when type is AUTOCOMPLETE to set where to search.
                        </li>
                    </ul>
                </li>
                <li>
                    placeholder (optional)
                    <ul>
                        <li>
                            Used to set a placeholder.
                        </li>
                    </ul>
                </li>
                <li>
                    param (optional)
                    <ul>
                        <li>
                            Used when type is NEAR to set middle text
                        </li>
                    </ul>
                </li>
                <li>
                    enum (optional)
                    <ul>
                        <li>
                            Used to specify an enum.  Overrides type.
                        </li>
                    </ul>
                </li>
                <li>
                    enumFilter (optional)
                    <ul>
                        <li>
                            Used to specify an enum should have filtering enabled. 
                            Useful for larger enums, awkward on smaller enums.
                        </li>
                    </ul>
                </li>
                <li>
                    enumMulti (optional)
                    <ul>
                        <li>
                            Used to specify an enum should allow multiple selections at once.
                        </li>
                    </ul>
                </li>
                <li>
                    enumCustom (optional)
                    <ul>
                        <li>
                            Used to specify an enum should allow users to enter custom values in 
                            addition to those in the enum.
                        </li>
                    </ul>
                </li>
                <li>
                    showValidationIssues (optional)
                    <ul>
                        <li>
                            Whether or not to show validation issues.  True by default.
                        </li>
                    </ul>
                </li>
                <li>
                    multivalued (optional)
                    <ul>
                        <li>
                            Turns the input into a multi input.  Works with any type.
                        </li>
                    </ul>
                </li>
                <li>
                    bulk (optional)
                    <ul>
                        <li>
                            A special type of enum for working with bulk sets of data.
                            Allows custom values, or choosing from one of the values in the set,
                            or leaving things as is.  Works with any type.
                        </li>
                    </ul>
                </li>
                <li>
                    hasConflictingDefinition (optional)
                    <ul>
                        <li>
                            False by default.  Mainly used for metacards to show when
                            a property can't be nailed down to any one type, thus making it
                            an issue to allow editing.
                        </li>
                    </ul>
                </li>
                <li>
                    readOnly (optional)
                    <ul>
                        <li>
                            False by default.  Used to prevent editing from being turned on.
                            Mainly used for metacards to show when the admin has disabled
                            editing on an attribute.
                        </li>
                    </ul>
                </li>
            </ul>
            The methods to know on the property view are:
            <ul>
                <li>
                    turnOnEditing
                    <ul>
                        <li>
                            Used to turn on editing.
                        </li>
                    </ul>
                </li>
                <li>
                    turnOffEditing
                    <ul>
                        <li>
                            Used to turn off editing.
                        </li>
                    </ul>
                </li>
                <li>
                    toJSON
                    <ul>
                        <li>
                            Used to get an object with a key for attribute and values.
                        </li>
                    </ul>
                </li>
                <li>
                    toPatchJSON
                    <ul>
                        <li>
                            Like toJSON but returns undefined if there are no changes.
                        </li>
                    </ul>
                </li>
            </ul>
            The methods to know on the property model are:
            <ul>
                <li>
                    getValue
                    <ul>
                        <li>
                            Returns the current value of the input.  Remember that
                            this is an array.
                        </li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</div>