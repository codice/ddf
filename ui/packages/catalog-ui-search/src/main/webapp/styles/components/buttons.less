button,
.composed-button {
  display: inline-block;
  border: none;
  outline: none;
  background: none;
  padding: 0px;
  border-radius: @border-radius;
  font-size: @largeFontSize;
  padding: 0px;
  line-height: @minimumButtonSize;
  height: @minimumButtonSize;
  .resetIconLineHeight;
  span {
    font-size: @largeFontSize;
  }
}

.button-mixin(@buttonColor) {
  background: @buttonColor;

  &:hover:not(.is-disabled):not([disabled]) {
    background: shade(@buttonColor, 10%);
    box-shadow: 0px 0px 2px shade(@buttonColor, 25%);
  }

  &:focus:not(.is-disabled):not([disabled]) {
    background: shade(@buttonColor, 25%);
    border: 0px 0px 2px shade(@buttonColor, 50%);
  }

  &.is-disabled, &:disabled {
    .background-gradient(tint(@buttonColor, 10%), shade(@buttonColor, 10%));
    cursor: not-allowed;
  }
}

button.is-negative,
.composed-button.is-negative {
  color: contrast(@negative-color);
  .button-mixin(@negative-color);
}

button.is-positive,
.composed-button.is-positive {
  color: contrast(@positive-color);
  .button-mixin(@positive-color);
}

button.is-neutral,
.composed-button.is-neutral {
  color: inherit;
  .button-mixin(rgba(0,0,0,0));
  background: rgba(0,0,0,0);
}

button.is-primary,
.composed-button.is-primary {
  color: contrast(@primary-color);
  .button-mixin(@primary-color);
}

button > span.is-disabled {
  display: none;
}

button.is-disabled {

  > span:not(.is-disabled) {
    display: inline;
  }
  > span.is-disabled {
    display: inline;
  }
}

button.in-text,
.composed-button.in-text {
  height: auto;
  line-height: inherit;
  font-size: inherit;
}

button.in-text  {
  padding: 0px @minimumSpacing;
}

.composed-button.in-text {
  > * {
    padding: 0px @minimumSpacing;
  }
}